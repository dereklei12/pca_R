# GitHub Actions Workflow for Cross-Platform R Testing

name: R-CMD-check

# Trigger on push or pull request to main/master branches
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }})

    # Test on multiple OS platforms
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, r: "release" }
          - { os: windows-latest, r: "release" }
          - { os: macOS-latest, r: "release" }

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true

      # Linux only
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Install R dependencies
        run: |
          install.packages(c("testthat", "ggplot2", "dplyr", "tidyr", "knitr"))
          install.packages(c("remotes", "rcmdcheck", "xml2"))
        shell: Rscript {0}

      # Optional packages - allowed to fail
      - name: Install optional packages
        continue-on-error: true
        run: |
          if (!requireNamespace("BiocManager", quietly = TRUE)) {
            install.packages("BiocManager")
          }
          BiocManager::install("mixOmics", ask = FALSE)
          install.packages("rARPACK")
          install.packages("RSpectra")
          install.packages("bench")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Run tests
        run: |
          library(testthat)

          # Show all failures
          set_max_fails(Inf)

          # Run test-pca_pSVD.R only
          cat("\n=== Running test-pca_pSVD.R ===\n")
          test_results <- test_file(
            "test/testthat/test-pca_pSVD.R",
            reporter = MultiReporter$new(reporters = list(
              ProgressReporter$new(),
              FailReporter$new(),
              JunitReporter$new(file = "test-results.xml")
            )),
            stop_on_failure = FALSE
          )

          # Display summary
          cat("\n=== Test Summary ===\n")
          print(test_results)

          # Exit with error if tests failed
          if (any(as.data.frame(test_results)$failed > 0)) {
            cat("\n✗ Tests FAILED\n")
            quit(status = 1)
          } else {
            cat("\n✓ All tests PASSED\n")
          }
        shell: Rscript {0}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.config.os }}-${{ matrix.config.r }}
          path: test-results.xml

      # Run benchmark
      # - name: Run benchmark
      #   if: runner.os == 'Linux'
      #   continue-on-error: true
      #   run: |
      #     if (file.exists("pca_pSVD.Rmd")) {
      #       rmarkdown::render("pca_pSVD.Rmd")
      #     }
      #   shell: Rscript {0}
